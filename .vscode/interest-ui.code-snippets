{
    "Component Props": {
        "scope": "javascript,typescript,javascriptreact",
        "prefix": "ipcp",
        "body": [
            "import { StylinComponentProps } from '@stylin.js/react';",
        "",
        "export interface ${1:${TM_DIRECTORY/.*[\\\\\\/](.*)/${1:/capitalize}/}}Props extends StylinComponentProps {",
        "  props: undefined;",
        "}",
        ""
        ],
        "description": "Create a base structure for the component's props"
    },
    "Interest UI Component": {
        "prefix": "ipc",
        "body": [
            "import stylin, { variant } from '@stylin.js/react';",
            "import React, { FC, PropsWithChildren } from 'react';",
            "",
            "import { ${1:${TM_DIRECTORY/.*[\\\\\\/](.*)/${1:/capitalize}/}}Props } from './${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}.types';",
            "",
            "const ${1:${TM_DIRECTORY/.*[\\\\\\/](.*)/${1:/capitalize}/}}Element = stylin('div')(",
            "  variant({",
            "   scale: 'variants',",
            "   property: 'variant',",
            "  })",
            ");",
            "",
            "export const ${1:${TM_DIRECTORY/.*[\\\\\\/](.*)/${1:/capitalize}/}}: FC<PropsWithChildren<${1:${TM_DIRECTORY/.*[\\\\\\/](.*)/${1:/capitalize}/}}Props>> = ({",
            "  ...props",
            "}) => (",
            "  <${1:${TM_DIRECTORY/.*[\\\\\\/](.*)/${1:/capitalize}/}}Element {...props}>",
            "    content",
            "  </${1:${TM_DIRECTORY/.*[\\\\\\/](.*)/${1:/capitalize}/}}Element>",
            ");",
            "",
            "export * from './${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}.types';",
            ""
        ],
        "description": "Create a base code for an component"
    },
    "Interest UI Storybook Component": {
        "prefix": "ipsc",
        "body": [
            "import { ComponentMeta, ComponentStory } from '@storybook/react';",
            "import React from 'react';",
            "",
            "import { ${TM_DIRECTORY/^.+?[\\/\\\\]([^\\/\\\\]+)[\\/\\\\][^\\/\\\\]+?$/${1:/capitalize}/} } from '..';",
            "",
            "export default {",
            "  title: '${TM_DIRECTORY/^.+?[\\/\\\\]([^\\/\\\\]+)[\\/\\\\][^\\/\\\\]+?$/${1:/capitalize}/}',",
            "  component:   ${TM_DIRECTORY/^.+?[\\/\\\\]([^\\/\\\\]+)[\\/\\\\][^\\/\\\\]+?$/${1:/capitalize}/},",
            "  argTypes: {",
            "   variant: {",
            "    options: ['type1', 'type2'],",
            "    control: { type: 'select' },",
            "  },",
            "  disabled: {",
            "    defaultValue: false,",
            "    control: { type: 'boolean' },",
            "  },",
            "  },",
            "} as ComponentMeta<typeof ${TM_DIRECTORY/^.+?[\\/\\\\]([^\\/\\\\]+)[\\/\\\\][^\\/\\\\]+?$/${1:/capitalize}/}>;",
            "",
            "const Template: ComponentStory<typeof ${TM_DIRECTORY/^.+?[\\/\\\\]([^\\/\\\\]+)[\\/\\\\][^\\/\\\\]+?$/${1:/capitalize}/}> = (args) => <${TM_DIRECTORY/^.+?[\\/\\\\]([^\\/\\\\]+)[\\/\\\\][^\\/\\\\]+?$/${1:/capitalize}/} {...args} />;",
            "",
            "export const Type1 = Template.bind({});",
            "",
            "Type1.args = {",
            "  variant: 'type1',",
            "};",
            "",
            "export const Type2 = Template.bind({});",
            "",
            "Type2.args = {",
            "  variant: 'type2',",
            "};",
            "",
            "export const Disabled = Template.bind({});",
            "",
            "Disabled.args = {",
            "  disabled: true,",
            "};"
        ],
        "description": "Create a base code for the component's story"
    }
}